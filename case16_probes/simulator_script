#!/bin/bash
# $1 is params.in FROM Dakota
# $2 is results.out returned to Dakota

# Description
#   Run the dakota tool and run the process chain
# ------------------------------------------------------------------------------

# Assign $1 and $2 to variables and reset because they seem to interferewith
# OpenFOAM's postProcess and sourcing
# ------------------------------------------------------------------------------
infile=$1
outfile=$2
set --

# Dakota change the parameters in this file
# ------------------------------------------------------------------------------
dprepro $infile initialConditions.template initialConditions.in

# Run simulation with new parameter set
# ------------------------------------------------------------------------------

    # Get uref, udir, z0 + loop number
    #---------------------------------------------------------------------------
    Uref=$(grep 'Uref' initialConditions.in | awk ' {print substr($2, 0, length($2)-1)}')   # gets the velocity value from initialConditions.in
    Dref=$(grep 'Dref' initialConditions.in | awk ' {print substr($2, 0, length($2)-1)}')   # gets the direction value from initialConditions.in
    loopNumber=$(echo $infile | awk -F. '{print $NF}')                                      # gets the evaluation number

    # Transform the scientific notation into a readable format for | bc
    # Here we remove e or E with *10^
    #---------------------------------------------------------------------------
    Uref=`echo $Uref | sed -e 's/[eE]+*/\*10\^/'`
    Dref=`echo $Dref | sed -e 's/[eE]+*/\*10\^/'`

    # Optical stuff
    #---------------------------------------------------------------------------
    Uref=`echo "scale=4; $Uref" | bc`
    Dref=`echo "scale=4; $Dref" | bc`

    # Output the parameters that are used now
    #---------------------------------------------------------------------------
    >&2 echo -e "   ++++ Evaluate sample $loopNumber"
    >&2 echo -e "   |"
    >&2 echo -e "   |--> Uref = $Uref [m/s]"
    >&2 echo -e "   |--> beta = $Dref [deg]"

    # choose the type of case depending on the wind direction
    #---------------------------------------------------------------------------
    pi=`echo "4*a(1)" |bc -l`                                                               # pi number
    Ucomp1=`echo "c($Dref*$pi/180)*$Uref" | bc -l`                                          # compute first component of velocity (U) for OF
    Ucomp2=`echo "s($Dref*$pi/180)*$Uref" | bc -l`                                          # compute second component of velocity (V) for OF
    cp -r ../cube_case/* .                                                                  # copy the test case template
    cd constant/polyMesh/                                                                   # get into the mesh folder
#    cp -rs ../../../mesh/polyMesh/* .                                                       # link the mesh to avoid duplicating files that are large
    cp -r ../../../mesh/polyMesh/* .
    cd ../../                                                                               # get back to the current workdir
    sed 's/Ucomp1/'${Ucomp1}'/g' initialConditions.in > initialConditions.1                 # input the first component of velocity (U) in initialConditions file
    sed 's/Ucomp2/'${Ucomp2}'/g' initialConditions.1 > initialConditions.2                  # input the second component of velocity (V) in initialConditions file
    vkconstant=0.41;                                                                        # von karman constant (only makes sense for 3D case)
    Href=10;                                                                                # reference height (only makes sense for 3D case)
    z0=0.01;                                                                                # roughness height (only makes sense for 3D case)
    uStar=`echo "$Uref*$vkconstant/l(($Href+$z0)/$z0)" | bc -l`                             # friction velocity
    tke=`echo "$uStar*$uStar/0.3" | bc -l`                                                  # initial turbulence kinetic energy value
    eps=`echo "$uStar*$uStar*$uStar/($vkconstant*($Href+$z0))" | bc -l`                     # initial dissipation rate value
    sed 's/tkeInitial/'${tke}'/g' initialConditions.2 > initialConditions.3                 # input initial turbulence kinetic energy value in initinalConditions
    sed 's/epsilonInitial/'${eps}'/g' initialConditions.3 > initialConditions.in            # input initial dissipation rate value in initinalConditions
    cp -r initialConditions.in 0/include/initialConditions                                  # copy the final file in 0/include/
    rm initialConditions.3 initialConditions.2 initialConditions.1 initialConditions.in                                             # remove temporary files

    # Run the simulation
    #---------------------------------------------------------------------------
    >&2 echo "   |--> Start simulation"
    source /opt/OpenFOAM/OpenFOAM-8/etc/bashrc                                              # source OF installation
    touch case$loopNumber.foam                                                              # create a dummy *.foam file to visualize with paraView if necessary

    #------------------------------------------------------------------------------
    >&2 echo "   |--> simpleFoam"
    decomposePar >& log.decomposePar                                                        # decompose in multiple processors (8 in this case)
    wait
    mpirun -np 8 simpleFoam -parallel >& log.SF                                             # run the solver (simpleFoam in this case)

    #------------------------------------------------------------------------------
    >&2 echo "   |--> Reconstruct case"
    reconstructParMesh -constant                                                            # reconstruct the mesh in constant (not necessary here)
    reconstructPar -latestTime                                                              # reconstruct the case latest step
    >&2 echo "   |--> End simulation"

    # Postprocess (with python)
    #------------------------------------------------------------------------------
    >&2 echo "   |--> Post-process with python"                                             # this step is needed since the output is a 3 component vector, and we need both variables together
    #python ../postProcess/compute_surface_Umag.py > output_Utheta.txt                       # run postprocessing rutine with python to compute the velocity magnitue in all the surface
    #python ../postProcess/compute_surface_Udir.py >> output_Utheta.txt                      # run postprocessing rutine with python to compute the velocity direction in all the surface
    python ../postProcess/compute_Umag_Udir.py
    #------------------------------------------------------------------------------
    >&2 echo "   |--> Send output back to dakota"
    mv output_Utheta.txt $outfile                                                           # give the final results to dakota to postProcess
    echo "Finished simulation in:"
    pwd
